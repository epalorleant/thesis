%\chapter{}
\label{p2:chap_intro}
\section*{Abstract}
\textit{In this part, we discuss on techniques to detect whether there are anomalies on an application or not, using execution traces.
Execution traces have become essential resources that many developers analyse to debug their applications. However, in practice, size of multimedia applications trace can reach gigabytes, which makes their exploitation 
very complex. Usually, developers use visualization tools before stating a hypothesis. In this part, we argue that this solution is not satisfactory and propose 
to automatically provide a diagnosis by comparing execution traces. We use distance based models and conduct a user case to show how TED, our automatic trace diagnosis tool, provides semantic added-value information to the developer.
 Performance evaluation over real world data shows that our approach is scalable.
}

\begin{center}
 ************
\end{center}

\vspace{1cm}
\section*{Context}
%Motivations

%Introduce Audio/video decoding , types of possible problems, execution traces, analysis

% \textbf{Motivations}\\

With the proliferation of embedded systems (from home boxes to tablets and smartphones) providing an everywhere access to multimedia contents, 
the development of multimedia applications is an area of high competition in which every second lost by a developer to debug the application amounts a financial loss for companies.

The analysis of execution traces, that are sequences of time-stamped events, is at the core of the optimization and debugging of applications. When the developer has a reference trace 
(which can be produced by a simulator), a technique for detecting possible anomalies within an execution trace  is to compare it with the reference trace using a suitable distance\cite{kumar12}. 
However, although there is an abundant literature about distances on sequences (\cite{Morchen06,tavenard2007,lcs00}), 
very few distances take into account the temporal aspect that is crucial in execution traces. More generally, designing an appropriate distance for 
a meaningful comparison between  multimedia execution traces is a difficult task. Indeed, it requires to capture and combine within a single numerical function, several aspects that are specific to multimedia 
execution traces. Whatever the quality of a distance for suggesting the existence of a bug in an execution trace, based on its numerical comparison 
with a reference trace, the results of the distance calculation are inherently difficult to interpret by human developers, in particular for finding 
the actual cause of the bug.

\section*{Contributions}
In this part, we propose to replace a black-box approach encapsulated in a single complex distance by a glass-box approach based on a fine-grained 
analysis of problems that are likely to occur in multimedia applications. The idea is that anomalies in multimedia applications usually have visible 
effects such as desynchronization of sound with the picture or subtitles, the interruption of a video streaming or the loss of some frames 
(a frame being an image rendered during a known time interval).

We have identified a family of anomalies likely to occur in  multimedia applications and that are visually perceptible when a user is watching a video. 
The nature of the anomalies can highly differ depending of the domains.

For each type of anomaly, we have designed a specific distance which measures appropriately the amplitude of the corresponding anomaly. If a technique is effective for 
an anomaly, it does not means that it will be effective for another type of anomaly in this domain or another one.\\
Based on these distances, we have designed a diagnosis tool able to detect degraded execution traces and to identify the causes of such a degraded behaviour.

\section*{RoadMap}
The rest of the part is organized as follows: we review existing work in Chapter \ref{p2:chap_related} and Chapter \ref{p2:chap_pb} provides some background and states the problem that we consider. 
In Chapter \ref{p2:chap_lldiag} we present the general approach that we propose to solve this problem. We present TED tool in chapter \ref{p2:chap_ted},
 and show part of the experimental results. Finally, Chapter \ref{p2:chap_concl} concludes with some perspectives.
