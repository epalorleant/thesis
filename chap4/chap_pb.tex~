\chapter{Execution Trace Diagnosis: Background and Problem Statement}
\label{p2:chap_pb}
\textit{This chapter introduces three well-known types of anomalies occurring in video streaming and states the trace diagnosis problem.}
\vspace{2ex}\vfill
%\minitoc

{\color{blue}{XXX Dans la section generation de traces d'execution de la partie introduction générale, bien expliquer ce qu'est un simulateur et positionner réellement }}
%son utilisation.
\section{Audio/Video decoding Anomalies Description}\label{sec:p2c1-pbs}
We presented in \ref{p0:intro} how to generate execution traces and saw that embedded systems directly integrate hardware tracing support
 to collect  events generated by applications or perform a post-mortem analysis of their execution.
People nowadays used their smartphones or tablets to watch video on many situations: during sport activities, while travelling, and so on.
While streaming a video, some common anomalies can occur, due to the application of video decoding . These anomalies are well known in the community of A/V developers (\cite{bug1,bug2}) and almost always have visual and sound effects on the video streaming. 
They can even be simulated using existing tools that are able to inject those perturbations.\\
We have chosen to detect three of the common errors that a developer encounters in his video players:\\ 
\textbf{$P_1$: Audio/video/subtitle desynchronization anomaly}: This anomaly reflects a desynchronization in time between audio, video or subtitles. The audio may be slower than the video or the subtitle may not appear at the right moment.  \\
\textbf{$P_2$: Player crash anomaly}: The player stops abruptly at a random execution time, without any reason.\\
\textbf{$P_3$: Slow streaming anomaly}: Visually, video is very slow. In this case the audio/video/subtitles are synchronized but take much more time than in a normal execution.

\section{Trace Diagnosis Problem Statement}
\subsection{Problem}
We introduce the general trace diagnosis problem that can be decomposed into two sub-problems.
\begin{enumerate}
 \item [Detect whether an execution trace presents some anomalies reflecting an abnormal behaviour of the application under supervision]:
Given two execution traces $T_r$ and $T_s$, a set $\mathsf{A}$ of anomalies. We denote the state of a trace, referring to another trace and anomalies as:
\begin{equation*}
State(T_s,T_r,\mathsf{A})= \left \{
\begin{array}{ll}
Abnormal & if~ anomalies(T_s,T_r) \in \mathsf{A}\\
Normal & else\\
\end{array}
\right.
\end{equation*}

Our task is to determine {\em state} of suspicious trace $T_s$, by finding possible anomalies.
\item[Identify the cause or at least the type(s) of these anomalies]:
if $State(T_s,T_r,\mathsf{A})==Abnormal$, our task is to determine the possible causes of $anomalies(T_s,T_r)$.
\end{enumerate}

\subsection{Method}


The two sub-problems are difficult to solve in general, i.e. without exploiting some additional knowledge or without restricting their scope in order to exploit some domain-specific characteristics.

Our approach to address the first sub-problem is to exploit error-free {\em reference} traces that can be obtained by a simulator, and to compare them with real execution traces using suitable distances. Detecting whether a real trace execution is abnormal consists in a distance-based comparison with the reference trace obtained by the simulator ran on the same video. 

Addressing the second sub-problem is crucial for trace debugging since the developers need to understand what is going wrong in order to identify the anomalies revealed by trace comparison. Our approach is to focus on the identification of pre-established types of domain-specific anomalies, namely those mentioned in Section \ref{sec:p2c1-pbs} and referred to as \textbf{$P_1$}, \textbf{$P_2$} and \textbf{$P_3$} respectively. 

The trace diagnosis problem that we consider can then be stated as follows: 

\textbf{{\em Given an execution trace $T_s$ %$ \mathscr{T}$
 and a reference trace $T_r$, how to automatically detect whether $T_s$ contains anomalies of type \textbf{$P_1$}, \textbf{$P_2$} or \textbf{$P_3$}, using a distance-based comparison with $T_r$.}}


