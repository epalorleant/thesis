\section{Distance-Based Diagnosis}
\label{c4:sec-lldiag}
\textit{This section explains our general approach for solving the trace diagnosis problem stated in previous chapter, using appropriate distances. }
%\vspace{2ex}\vfill
%\minitoc

\subsection{Generalities}
A distance $d$ between two objects is a numerical measure of how far apart these objects are \cite{tan06}. 
It should be efficiently computable(\cite{Man97}) and satisfy some requirements. 
There exist many distance definitions in the literature. For every three objects $T_1$, $T_2$ and $T_3$, the following relations must hold:\\
\begin{equation}
 \left \{
\begin{array}{l}
d(T_1,T_2) \geq 0  \\
d(T_1,T_2)=0 \quad only ~ if \quad  T_1=T_2\\
d(T_1,T_2)=d(T_2,T_1) \\
d(T_1,T_2)+d(T_2,T_3) \geq d(T_1,T_3)\\
\end{array}
 \right.
\label{eq-propdist}
\end{equation}

It is important to notice that  the term {\em distance} is frequently used  as a synonym of {\dissimilarity} but many dissimilarities measures do not 
satisfy one or more of the previous properties(eq. \ref{eq:propdist}).\\
There is no ``magic'' distance formula to capture degree to which two objects are different. As we saw in Chapter \ref{c2:related}, Section \ref{c2:sec-relabs}, 
distance type depend of nature of data (symbolic sequences, numeric sequences,..), their application domain (telecommunications, biologie, education,..), nature of anomalies and 
some other points. Each measurement of distance is appropriate to a particular circumstance.\\
In our case, instead of defining a single distance as a black-box to detect various anomalies, our glass-box approach defines multiple distances that are appropriate to the types of anomalies we want to detect. 

The procedure that we follow to define our distances can be described in several steps. First, we decode a movie video with $gstreamer$ \footnote{Procedure is detailed in Section \ref{subsec:c4-gst}} and obtain a reference trace. 
Then, we inject in the streaming, perturbations corresponding to the three types of anomalies and we obtain for each anomaly 
the corresponding abnormal execution traces. Finally, for each type of anomaly, we manually analyze the reference trace and the execution trace, 
and extract the differences that are relevant for each distance.

In the following, we present the three distances. The first one is the {\em occurrence distance}, suitable for detecting an anomaly of type $P_1$ ( Audio/video/subtitle desynchronization anomaly) 
when applied to an execution trace and the corresponding reference trace. The second distance is the {\em dropping distance}, appropriate to identify 
anomalies of type $P_2$ (Player crash anomaly). Finally, we introduce the {\em temporal distance} designed to detect anomalies of type $P_3$ (Slow streaming anomaly). For each distance, we give a 
formal definition and an algorithm for its computation. 

\subsection{Occurrence distance} \label{sec:c4-occdist}
For $P_1$ anomaly, when examining the traces, one can detect different numbers of occurrences of some events in the simulated trace and the abnormal one.\\
We first define the {\em occurrence ratio} of an event in two traces. 
\begin{defi}\label{def:c4-occratio}
 Let $T_1$ and $T_2$ be two execution traces. Let $nb\_occur(e,T)$  
be the number of occurrences of event $e$ in trace $T$. The {\em occurrence ratio} of an event $e$ in the two traces $T_1$ and $T_2$ is defined as follows:
\begin{equation}
 occ\_ratio(e,T_1,T_2)= \frac{Min \{nb\_occ(e,T_1),nb\_occ(e,T_2)\}}{Max \{ nb\_occ(e,T_1),nb\_occ(e,T_2) \}}
\label{eq:c4-occdist}
\end{equation}
\end{defi}
%Note that $nb\_occur(e,T)$ should be greater than zero.\\
Note that $e$ should appear in traces. A value of $occ\_ratio(T1,T2)$ close to zero, means that event $e$ occurs  
in one of the two traces much more frequently than in the other one.  
Such a situation is related to an anomaly $P_1$ because a  
desynchronization in time between audio, videao and/or subtitles  
induces many abnormal events.\\
That is why we define the {\em occurrence distance} between two traces as the number of events that have an occurrence ratio less than or equal 
to a given threshold. This distance is appropriate to retrieve $P_1$, A/V/S desync. anomaly, (see section \ref{c4:subsec-pbs}) because it measures the number of events
 that differentiate $T_1$ from $T_2$. The formal definition of this distance, thereafter denoted $d_1$ is the following:
\begin{defi} \label{def:c4-occdist}
Let $T_1$ and $T_2$ be two execution traces. The \textbf{\em occurrence distance} between $T_1$ and $T_2$ is: % defined as follows:
%Let $supp_T(e)$ be the number of occurrences of $e$ in $T$, {\em occurs(e,t)} a boolean function at True if event $e$ occurs in sequence $T$.\\
\begin{equation}
 d_1(T_1,T_2)=|\{e~|~ occ\_ratio(e,T_1,T_2) \leq \theta \}|
\end{equation}
where $\theta$ is a given threshold.
\end{defi}

\begin{exple}
 Consider the traces $T_1$ and $T_2$ below, and let $\theta=0.5$. $d_1(T_1,T_2)=1$ with:\\
 $occ\_ratio(It,T_1,T_2)=3/4=0.75$, $occ\_ratio(CS,T_1,T_2)=1/3=0.33$ .\\
\begin{center}
\includegraphics[scale=0.9]{chap4/images/exple1_dist1.pdf}
\end{center}
\end{exple}

\subsection{Dropping distance} \label{sec:c4-occdist}
For $P_2$ anomaly, when comparing the simulated and abnormal traces, we found that some events seem to  appear only in one trace and not in the other one.\\
The corresponding {\em dropping distance} refers to the number of distinct events that belong only to one trace. This distance is also used by \cite{wongsuphasawat2009finding} as
 {\em mismatch score} on temporal categorical records.
\begin{defi}\label{def:c4-dropdist}
 Let {\em events(T)} be the set of distinct events in $T$. The \textbf{\em dropping distance} between $T_1$ and $T_2$ is the size of the symmetric difference between {\em event($T_1$)} and {\em event($T_2$)}.
\begin{equation}
 d_2(T_1,T_2)=|events(T_1)\bigtriangleup events(T_2)|
\end{equation}
\end{defi}
This distance is appropriate to retrieve $P_2$, i.e. Player crash anomaly (see \ref{sec:p2c1-pbs}).\\
\begin{exple}
 For traces $T_1$ and $T_2$ below, $events(T_1)=\{X,CS,It,E\}$, $events(T_2)=\{CS,It,U\}$; 
$events(T_1)\bigtriangleup events(T_2)=\{X,E,U\}$ and $d_2(T_1,T_2)=3$.\\
\begin{center}
  \includegraphics[scale=0.8]{chap4/images/exple1_dist2.pdf}
\end{center}
\end{exple}

\subsection{Temporal distance} \label{def:c4-dropdist}
%etoffer sur l'importance de la fonction de cout.
For $P_3$ anomaly, the duration and the order of some events differ in the two traces. In the abnormal trace, some events durations are much longer than in the simulated trace.\\
The temporal distance that we propose is an adaptation of the distance model of \textit{Mannila et. al} \cite{Mannila97} which is an edit-distance taking into account temporal aspects. 
It uses three basic operations:
\begin{itemize}
 \item \textit{Ins(e,t) } that inserts an event $e$ at time $t$ 
\item \textit{Del(e,t)} that deletes an event $e$ at time $t$
\item \textit{Move(e,t,t')} that moves an event $e$ from $t$ to $t'$.
\end{itemize}
Note that the Move operation is order-preserving. This means that if $t(e)=t < t'=t(e')$ and $e,e'$ are not deleted than one cannot have 
$Move(e,t,t_1)$ and $Move(e',t',t'_1)$ for $t_1 > t'_1$.
\begin{exple}
 For instance, in the example below, the operation $Move(It,1)$ that transforms $T_1$ into $T_2$ is forbidden.
\begin{center}
  \includegraphics[scale=0.8]{chap4/images/example-mt.pdf}
\end{center}
\end{exple}

  A cost $c(o)$ is associated with each operation $o$ and $c(Ins(e,t))=c(Del(e,t))=w(e)$ where $w(e)$ is a weight  
associated with event $e$. \\ $c(Move(e,t,t'))=V|t'-t|$ where $V$ is a constant such that $V \leq 2.w(e)$. Without this condition,  
it would always be better to do a deletion and an insertion of an event $e$, instead of moving $e$ from $t$ to $t'$. \\
The cost of a sequence of operations can then be deduced. Let %$c(o_i)$ be the cost of $o_i$, and let
 $O=o_1 \dots o_k $ be a sequence consisting of $k$ transformations.
 The cost of $O$ is: 
\begin{equation}
 c(O)= \sum^{k}_{i=1} c(o_i)
\end{equation}

The distance $ d(T_1,T_2)$ is defined as the cost of the cheapest sequence of operations that transform $T_1$ into $T_2$. Thus, if 
$\Theta$ is the set of operation sequences that transform $T_1$ into $T_2$, then:

\begin{equation}
 \begin{array}{c}
 d(T_1,T_2)=\underset{O \in \Theta}{Min} c(O)
\end{array}
\end{equation}

\begin{exple}
 For traces $T_1$ and $T_2$ below, the cheapest order-preserving sequence of operations that transforms $T_1$ into $T_2$ is 
$Move(It,2,1),Move(It,4,2),Ins(U,5)$= $3V+w(U)$.
% the minimum cost  of transforming $T_1$ to $T_2$ would be: $Move(It,2,1)+Move(It,4,2)+Ins(U,5)+Move(CS,7,7)$= $V.3+w(U)$.\\
\begin{center}
 
 \includegraphics[scale=0.7]{chap4/images/exple_dist1-eps-converted-to.pdf}
\end{center}

\end{exple}

The beginning timestamp in two traces is not always the same. Consequently, results obtained with this method are not satisfactory. We explain this problem in example 4.\\

\begin{exple}
 For the two traces below, $d(T_1,T_2)\neq0$. 
\begin{center}
  \includegraphics[scale=0.7]{chap4//images/exple_dist2b-eps-converted-to.pdf}
\end{center}

\end{exple}

This is not satisfactory because $T_1$ and $T_2$ have exactly the same events, and the same time intervals between events. Clearly, such traces should be considered as similar. 
Therefore, we adapt the Mannila distance model in order to have $d_3(T_1,T_2)=0$ when $T_2$ is obtained from $T_1$ by a time shift.
%take into account gaps (i.e. time lapses) between events.In practice we used a typical dynamic algorithm\cite{Mannila97} and adapted it to obtain our {\em temporal distance}. \\
\begin{defi}
 Let $T_1=(e_1,\ldots, e_n)$ and $T_2=(f_1,\ldots, f_m)$ two execution traces, and let $r(i,j)$ denote the minimum cost of the operations needed to transform 
the first $i$ events of $T_1$ into the first $j$ events of $T_2$. The \textbf{\em temporal distance} between $T_1$ and $T_2$ is:
\begin{equation}
  d_3(T_1,T_2)=r(n,m)%\qquad n=|T_1|, m=|T_2|$$ 
\end{equation}
where $r(i,j)$ is computed according to the following dynamic programming algorithm:
%The following conditions for $r(i,j)$ must hold: \\

%
\begin{equation}
\left \{
\begin{split}[ll]
r(0,0) & = & 0\\
r(i,0) & = & r(i-1,0)+w(e_i)\\
r(0,j) & = &  r(0,j-1)+w(f_j)\\
r(i,j) & = &  min~ \{~ r(i-1,j)+w(e_i),r(i,j-1)+w(f_j),r(i-1,j-1)+cost(i,j)\}
\end{split}
\right .
\end{equation}


$w(e_i)$ is the cost of deleting event $e_i$ at position $i$. $w(f_j)$ the cost of inserting event $f_j$ at position $j$ and \\
\begin{equation}
 \mathsmaller {cost(i,j)}= \left \{
\begin{array}{l}
   \mathsmaller{ w(e_i)+w(f_j) \qquad \mathsmaller if ~ e_i\neq f_j  }\\
  \mathsmaller{ V.|(t_{i}-t_{i-1})-(t'_{j}-t'_{j-1})| \qquad if ~ e_i=f_j~ and ~ i=j}\\
  \mathsmaller{ V.|t_{i}-t'_{j}|  \qquad  if ~ e_i=f_j~ and ~ i \neq j}\\
\end{array}
\right.
\end{equation}

\end{defi}
The application of this {\em Temporal distance} in the traces of example 2 gives $d_3(T_1,T_2)=0$. 
Hence, this distance is appropriate to retrieve $P_3$, i.e. slow streaming anomaly (see subsection \ref{sec:c4-pbs}).\\

\subsection{Distance computation algorithms}
%When introducing distances, talk about semantic of the diagnosis.
For each distance defined above the output is a value in $\mathbb{R^+}$. 
The distance can be a large number for which developer has difficulties to compare. 
In order to better interpret the results, it is important to normalize the output. 
We use a non-linear transformation $g$, in order to normalize the distances:\\
$$\begin{array}{ccccc}
g & : & \mathbb{R^+} & \to & [0,1] \\
 & & d & \mapsto & d/(1+d)=g(d) \\
\end{array}$$
%\textit{Example:}\\ $d_2(T_1,T_2)=\frac{|events(T_1)-events(T_2)|+|events(T_2)-events(T_1)|}{1+|events(T_1)-events(T_2)|+|events(T_2)-events(T_1)|}$\\
Computation of {\em occurrence distance} and {\em dropping distance} are done in linear time complexity since a simple scan of traces is necessary. 
With the dynamic programming algorithm presented above, the computation of {\em temporal distance} 
 has a quadratic complexity $O(m \times n)$, where $m$ and $n$ are the lengths of the two traces. 
 \cite{wu90}  proposed some improvements with a $O(np)$ time complexity, where $p=D/2-(n-m)/2$ and 
$D$ being the length of a shortest edit script (consisting of insertions and deletions) between the two sequences to compare; we suppose $n \geq m$.

\subsection{Distance computation levels}
It is important to emphasize that each of these distances can be computed at different levels of granularity. 
The whole trace can be decomposed into portions of traces (sequence 
of events) related to a specific plugin of the pipeline, as described in Section \ref{subsec:c0-etgen}. 
Our distances can be applied as the same manner on portions of trace and, when comparing sequences of events by plugin, we can detect in which plugin an anomaly takes place.
 {\color{blue} XXX schema pipeline, extraction portion de traces, application distancs par portions}


%#####################################Architecture of TED#################################################

